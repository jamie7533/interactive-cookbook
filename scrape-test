from recipe_scrapers import scrape_me
from ytSearch import search_youtube
#from parse_ingredients import parse_ingredient
from ingredient_parser import parse_ingredient
#from nltk.parse import ShiftReduceParser
import spacy
from spacy import displacy
from step import Step

substutions = {
    'Allspice': {'Amount': '1 teaspoon', 'Substitution': '1/2 teaspoon cinnamon, 1/4 teaspoon ginger, and 1/4 teaspoon cloves'},
    'Arrowroot starch': {'Amount': '1 teaspoon', 'Substitution': '1 tablespoon flour OR 1 teaspoon cornstarch'},
    'Baking mix': {'Amount': '1 cup', 'Substitution': '1 cup pancake mix'},
    'Baking powder': {'Amount': '1 teaspoon', 'Substitution': '1/4 teaspoon baking soda plus 1/2 teaspoon cream of tartar OR 1/4 teaspoon baking soda plus 1/2 cup buttermilk (decrease liquid in recipe by 1/2 cup)'},
    'Baking soda': {'Amount': '1 teaspoon', 'Substitution': '4 teaspoons baking powder OR 1 teaspoon potassium bicarbonate and 1/3 teaspoon salt. NOTE: If the recipe calls for an acidic liquid such as sour cream, yogurt, buttermilk, vinegar, molasses, or citrus juice, you should replace it with the same amount of whole milk'},
    'Beer': {'Amount': '1 cup', 'Substitution': '1 cup nonalcoholic beer OR 1 cup chicken broth'},
    'Brandy': {'Amount': '1/4 cup', 'Substitution': '1 teaspoon imitation brandy extract plus enough water to make 1/4 cup'},
    'Bread crumbs': {'Amount': '1 cup', 'Substitution': '1 cup cracker crumbs OR 1 cup matzo meal OR 1 cup ground oats'},
    'Beef broth': {'Amount': '1 cup', 'Substitution': '1 bouillon cube plus 1 cup boiling water OR 1 tablespoon soy sauce plus enough water to make 1 cup OR 1 cup vegetable broth'},
    'Chicken broth': {'Amount': '1 cup', 'Substitution': '1 bouillon cube plus 1 cup boiling water OR 1 tablespoon soy sauce plus enough water to make 1 cup OR 1 cup vegetable broth'},
    'Brown sugar': {'Amount': '1 cup, packed', 'Substitution': '1 cup white sugar plus 1/4 cup molasses and decrease the liquid in recipe by 1/4 cup OR 1 cup white sugar OR 1 1/4 cups confectioners\' sugar'},
    'Salted Butter': {'Amount': '1 cup', 'Substitution': '1 cup margarine OR 1 cup shortening plus 1/2 teaspoon salt OR 7/8 cup vegetable oil plus 1/2 teaspoon salt OR 7/8 cup lard plus 1/2 teaspoon salt'},
    'Unsalted Butter': {'Amount': '1 cup', 'Substitution': '1 cup shortening OR 7/8 cup vegetable oil OR 7/8 cup lard'},
    'Buttermilk': {'Amount': '1 cup', 'Substitution': '1 cup yogurt OR 1 tablespoon lemon juice or vinegar plus enough milk to make 1 cup'},
    'Cheddar cheese': {'Amount': '1 cup shredded', 'Substitution': '1 cup shredded Colby cheddar OR 1 cup shredded Monterey Jack cheese'},
    'Chervil': {'Amount': '1 tablespoon chopped fresh', 'Substitution': '1 tablespoon chopped fresh parsley'},
    'Chicken base': {'Amount': '1 tablespoon', 'Substitution': '1 cup canned or homemade chicken broth or stock. Reduce liquid in recipe by 1 cup'},
    'Semisweet chocolate': {'Amount': '1 ounce', 'Substitution': '1 (1-ounce) square of unsweetened chocolate plus 4 teaspoons sugar OR 1 ounce semisweet chocolate chips plus 1 teaspoon shortening'},
    'Unsweetened chocolate': {'Amount': '1 ounce', 'Substitution': '3 tablespoons unsweetened cocoa plus 1 tablespoon shortening or vegetable oil'},
    'Cocoa': {'Amount': '1/4 cup', 'Substitution': '1 (1-ounce) square unsweetened chocolate'},
    'Condensed cream of mushroom soup': {'Amount': '1 (10.75-ounce) can', 'Substitution': '1 (10.75-ounce) can condensed cream of celery, cream of chicken, or golden mushroom soup'},
    'Corn syrup': {'Amount': '1 cup', 'Substitution': '1 1/4 cup white sugar plus 1/3 cup water OR 1 cup honey OR 1 cup light treacle syrup'},
    'Cottage cheese': {'Amount': '1 cup', 'Substitution': '1 cup farmer\'s cheese OR 1 cup ricotta cheese'},
    'Cracker crumbs': {'Amount': '1 cup', 'Substitution': '1 cup bread crumbs OR 1 cup matzo meal OR 1 cup ground oats'},
    'Half and Half': {'Amount': '1 cup', 'Substitution': '7/8 cup milk plus 1 tablespoon butter'},
    'Heavy Cream': {'Amount': '1 cup', 'Substitution': '1 cup evaporated milk OR 3/4 cup milk plus 1/3 cup butter'},
    'Light Cream': {'Amount': '1 cup', 'Substitution': '1 cup evaporated milk OR 3/4 cup milk plus 3 tablespoons butter'},
    'Whipped Cream': {'Amount': '1 cup', 'Substitution': '1 cup frozen whipped topping, thawed'},
    'Cream of tartar': {'Amount': '1 teaspoon', 'Substitution': '2 teaspoons lemon juice or vinegar'},
    'Creme fraiche': {'Amount': '1 cup', 'Substitution': 'Combine 1 cup of heavy cream and 1 tablespoon of plain yogurt. Let stand for 6 hours at room temperature'},
    'Egg': {'Amount': '1 whole (3 tablespoons or 1.7 oz)', 'Substitution': '2 1/2 tablespoons of powdered egg substitute plus 2 1/2 tablespoons water OR 1/4 cup liquid egg substitute OR 1/4 cup silken tofu pureed OR 3 tablespoons mayonnaise OR half a banana mashed with 1/2 teaspoon baking powder OR 1 tablespoon powdered flax seed soaked in 3 tablespoons water'},
    'Evaporated milk': {'Amount': '1 cup', 'Substitution': '1 cup light cream'},
    'Farmer\'s cheese': {'Amount': '8 ounces', 'Substitution': '8 ounces dry cottage cheese OR 8 ounces creamed cottage cheese, drained'},
    'Baking fats': {'Amount': '1 cup', 'Substitution': '1 cup applesauce OR 1 cup fruit puree'},
    'Flour': {'Amount': '1 cup', 'Substitution': 'for bread: 1 cup all-purpose flour minus 2 tablespoons. For a cake: 1 cup all-purpose flour plus 1 teaspoon wheat gluten'},
    'self-rising Flour': {'Amount': '1 cup', 'Substitution': '7/8 cup all-purpose flour plus 1 1/2 teaspoons baking powder and 1/2 teaspoon of salt'},
    'Garlic': {'Amount': '1 clove', 'Substitution': '1/8 teaspoon garlic powder OR 1/2 teaspoon granulated garlic OR 1/2 teaspoon garlic salt, reduce salt in recipe'},
    'Gelatin': {'Amount': '1 tablespoon, granulated', 'Substitution': '2 teaspoons agar agar'},
    'Dry Ginger': {'Amount': '1 teaspoon', 'Substitution': '2 teaspoons chopped fresh ginger'},
    'Fresh ginger': {'Amount': '1 teaspoon, minced', 'Substitution': '1/2 teaspoon ground dried ginger'},
    'Green onion': {'Amount': '1/2 cup , chopped', 'Substitution': '1/2 cup chopped onion OR 1/2 cup chopped leek OR 1/2 cup chopped shallots'},
    'Hazelnuts': {'Amount': '1 cup whole', 'Substitution': '1 cup macadamia nuts OR 1 cup almonds'},
    'Herbs': {'Amount': '1 tablespoon chopped fresh', 'Substitution': '1 teaspoon (chopped or whole leaf) dried herbs'},
    'Herring': {'Amount': '8 ounces', 'Substitution': '8 ounces of sardines'},
    'Honey': {'Amount': '1 cup', 'Substitution': '1 1/4 cup white sugar plus 1/3 cup water OR 1 cup corn syrup OR 1 cup light treacle syrup'},
    'Hot pepper sauce': {'Amount': '1 teaspoon', 'Substitution': '3/4 teaspoon cayenne pepper plus 1 teaspoon vinegar'},
    'Lard': {'Amount': '1 cup', 'Substitution': '1 cup shortening OR 7/8 cup vegetable oil OR 1 cup butter'},
    'Lemon grass': {'Amount': '2 fresh stalks', 'Substitution': '1 tablespoon lemon zest'},
    'Lemon juice': {'Amount': '1 teaspoon', 'Substitution': '1/2 teaspoon vinegar OR 1 teaspoon white wine OR 1 teaspoon lime juice'},
    'Lemon zest': {'Amount': '1 teaspoon', 'Substitution': '1/2 teaspoon lemon extract OR 2 tablespoons lemon juice'},
    'Lime juice': {'Amount': '1 teaspoon', 'Substitution': '1 teaspoon vinegar OR 1 teaspoon white wine OR 1 teaspoon lemon juice'},
    'Lime zest': {'Amount': '1 teaspoon', 'Substitution': '1 teaspoon lemon zest'},
    'Macadamia nuts': {'Amount': '1 cup', 'Substitution': '1 cup almonds OR 1 cup hazelnuts'},
    'Mace': {'Amount': '1 teaspoon', 'Substitution': '1 teaspoon nutmeg'},
    'Margarine': {'Amount': '1 cup', 'Substitution': '1 cup shortening plus 1/2 teaspoon salt OR 1 cup butter OR 7/8 cup vegetable oil plus 1/2 teaspoon salt OR 7/8 cup lard plus 1/2 teaspoon salt'},
    'Mayonnaise': {'Amount': '1 cup', 'Substitution': '1 cup sour cream OR 1 cup plain yogurt'},
    'Whole milk': {'Amount': '1 cup', 'Substitution': '1 cup soy milk OR 1 cup rice milk OR 1 cup water or juice OR 1/4 cup dry milk powder plus 1 cup water OR 2/3 cup evaporated milk plus 1/3 cup water'},
    'Mint': {'Amount': '1/4 cup chopped', 'Substitution': '1 tablespoon dried mint leaves'},
    'Molasses': {'Amount': '1 cup', 'Substitution': 'Mix 3/4 cup brown sugar and 1 teaspoon cream of tartar'},
    'Mustard: prepared': {'Amount': '1 tablespoon', 'Substitution': 'Mix together 1 tablespoon dried mustard, 1 teaspoon water, 1 teaspoon vinegar and 1 teaspoon sugar'},
    'Onion': {'Amount': '1 cup, chopped', 'Substitution': '1 cup chopped green onions OR 1 cup chopped shallots OR 1 cup chopped leeks OR 1/4 cup dried minced onion OR 1/4 cup onion powder'},
    'Orange juice': {'Amount': '1 tablespoon', 'Substitution': '1 tablespoon other citrus juice'},
    'Orange zest': {'Amount': '1 tablespoon', 'Substitution': '1/2 teaspoon orange extract OR 1 teaspoon lemon juice'},
    'Parmesan cheese': {'Amount': '1/2 cup, grated', 'Substitution': '1/2 cup grated Asiago cheese OR 1/2 cup grated Romano cheese'},
    'Parsley': {'Amount': '1 tablespoon chopped fresh', 'Substitution': '1 tablespoon chopped fresh chervil OR 1 teaspoon dried parsley'},
    'Pepperoni': {'Amount': '1 ounce', 'Substitution': '1 ounce salami'},
    'Raisin': {'Amount': '1 cup', 'Substitution': '1 cup dried currants OR 1 cup dried cranberries OR 1 cup chopped pitted prunes'},
    'Rice': {'Amount': '1 cup, cooked', 'Substitution': '1 cup cooked barley OR 1 cup cooked bulgur OR 1 cup cooked brown, White or wild rice'},
    'Ricotta': {'Amount': '1 cup', 'Substitution': '1 cup dry cottage cheese OR 1 cup silken tofu'},
    'Rum': {'Amount': '1 tablespoon', 'Substitution': '1/2 teaspoon rum extract, plus enough water to make 1 tablespoon'},
    'Saffron': {'Amount': '1/4 teaspoon', 'Substitution': '1/4 teaspoon turmeric'},
    'Salami': {'Amount': '1 ounce', 'Substitution': '1 ounce pepperoni'},
    'Semisweet chocolate chips': {'Amount': '1 cup', 'Substitution': '1 cup chocolate candies OR 1 cup peanut butter or other flavored chips OR 1 cup chopped nuts OR 1 cup chopped dried fruit'},
    'Chopped shallots': {'Amount': '1/2 cup', 'Substitution': '1/2 cup chopped onion OR 1/2 cup chopped leek OR 1/2 cup chopped green onion'},
    'Shortening': {'Amount': '1 cup', 'Substitution': '1 cup butter OR 1 cup margarine minus 1/2 teaspoon salt from recipe'},
    'Sour cream': {'Amount': '1 cup', 'Substitution': '1 cup plain yogurt OR 1 tablespoon lemon juice or vinegar plus enough cream to make 1 cup OR 3/4 cup buttermilk mixed with 1/3 cup butter'},
    'Sour milk': {'Amount': '1 cup', 'Substitution': '1 tablespoon vinegar or lemon juice mixed with enough milk to make 1 cup: Let stand 5 minutes to thicken'},
    'Soy sauce': {'Amount': '1/2 cup', 'Substitution': '1/4 cup Worcestershire sauce mixed with 1 tablespoon water'},
    'Beef stock': {'Amount': '1 cup', 'Substitution': '1 cube beef or chicken bouillon dissolved in 1 cup water'},
    'Chicken stock': {'Amount': '1 cup', 'Substitution': '1 cube beef or chicken bouillon dissolved in 1 cup water'},
    'Sweetened condensed milk': {'Amount': '1 (14-ounce) can', 'Substitution': '3/4 cup white sugar mixed with 1/2 cup water and 1 1/8 cups dry powdered milk: Bring to a boil and cook, stirring frequently, until thickened, about 20 minutes'},
    'Vegetable oil': {'Amount': '1 cup', 'Substitution': 'For Baking: 1 cup applesauce OR 1 cup fruit puree. For Frying: 1 cup lard OR 1 cup vegetable shortening'},
    'Vinegar': {'Amount': '1 teaspoon', 'Substitution': '1 teaspoon lemon or lime juice OR 2 teaspoons white wine'},
    'White sugar': {'Amount': '1 cup', 'Substitution': '1 cup brown sugar OR 1 1/4 cups confectioners\' sugar OR 3/4 cup honey OR 3/4 cup corn syrup'},
    'Wine': {'Amount': '1 cup', 'Substitution': '1 cup chicken or beef broth OR 1 cup fruit juice mixed with 2 teaspoons vinegar OR 1 cup water'},
    'Active dry yeast': {'Amount': '1 (.25-ounce) package', 'Substitution': '1 cake compressed yeast OR 2 1/2 teaspoons active dry yeast OR 2 1/2 teaspoons rapid rise yeast'},
    'Yogurt': {'Amount': '1 cup', 'Substitution': '1 cup sour cream OR 1 cup buttermilk OR 1 cup sour milk'}
}



nlp = spacy.load("en_core_web_sm")
#sample_sentence = "Cover the baking dish tightly with aluminum foil and bake until the chicken and rice are cooked through, about 1 hour and 25 minutes"
#sample_sentence = "In a large bowl, combine the ground chuck, onion mixture, bread crumbs, and eggs, and mix lightly with a fork"
#sample_sentence = "Cover the baking dish tightly with aluminum foil and bake until the chicken and rice are cooked through, about 1 hour and 25 minutes. A pan of hot water in the oven, under the meat loaf, will keep the top from cracking"
sample_sentence = "Bake for 1 to 1 1/4 hours until the internal temperature is 160 and the loaf is happy" #cooked"#, until the internal temperature is 160 degrees F and the meat loaf is cooked through."# (A pan of hot water in the oven, under the meat loaf, will keep the top from cracking.)"
doc = nlp(sample_sentence)

print ("{:<15} | {:<8} | {:<15} | {:<20}".format('Token','Relation','Head', 'Children'))
print ("-" * 70)

for token in doc:
  # Print the token, dependency nature, head and all dependents of the token
  print ("{:<15} | {:<8} | {:<15} | {:<20}"
         .format(str(token.text), str(token.dep_), str(token.head.text), str([child for child in token.children])))
# scraper = scrape_me('https://www.spicetheplate.com/pork/korean-style-pan-fried-pork-belly/', wild_mode=True)
# scraper = scrape_me('https://www.foodnetwork.com/recipes/ina-garten/meat-loaf-recipe-1921718')

# divide larger steps into sentences
# for each sentence, use the dependency parser
# if there is no 'nsubj' (token.dep_) and a ROOT is found, that ROOT is an imperative/command --> therefore the sentence is a step
# ----- ROOT = cooking action
# if we find one with 'nsub', append it to the last step so far

### testing
# long_step = "In a large bowl, combine the ground chuck, onion mixture, bread crumbs, and eggs, and mix lightly with a fork. Don't mash or the meat loaf will be dense. Shape the mixture into a rectangular loaf on a sheet pan covered with parchment paper. Spread the ketchup evenly on top. Bake for 1 to 1 1/4 hours, until the internal temperature is 160 degrees F and the meat loaf is cooked through. (A pan of hot water in the oven, under the meat loaf, will keep the top from cracking.) Serve hot."
# shorter_steps = long_step.split('.')
# final_steps = []
# carry_over = ""
# ingredients = []

# for i, step in enumerate(shorter_steps):
#     annotated_step = Step(text=step + carry_over, ingredients = ingredients)
#     action = None
#     nsubj_exists = False
        
#     # find root, add to list of steps
#     for token in annotated_step.parse:
#         relation = str(token.dep_)
#         if relation == 'nsubj':  # if not an imperative/command sentence
#             print('nsubj: ', token)
#             nsubj_exists = True
#             break
#         if relation == 'ROOT': 
#             print('ROOT: ', token)
#             action = str(token.text)
    
#     if nsubj_exists:
#         if i == 0:  # if not a command and the very first sentence
#             carry_over = annotated_step.text  # save it for the next step
#         else:
#             # recreate the Step object for final_steps[i - 1]
#             print(annotated_step.text)
#             print(i, final_steps)
#             new_text = final_steps[-1].text + annotated_step.text 
#             final_steps[-1] = Step(text=new_text, ingredients = ingredients)
#     else:
#         final_steps.append(annotated_step)

# for step in final_steps:
#     print(step.text)

### GLOBAL VARIABLES ###
scraper = None
ingredients = None
parsed_ingredients = []
ingredients_name = []
steps = None
parsed_steps = None

def scrape(url):
    global scraper, ingredients, parsed_ingredients, steps
    scraper = scrape_me(url, wild_mode=True)

    ingredients = scraper.ingredients()

    #steps = scraper.instructions_list()

    for i in ingredients:
        ingredient_parse = parse_ingredient(i)
        parsed_ingredients.append(ingredient_parse) # if only a comment, remove from ingredients
        ingredients_name.append(ingredient_parse["name"])
    
    parse_steps(scraper.instructions())

    steps = [s.text for s in parsed_steps]

def parse_steps(instructions):
    global parsed_steps
    instructions = instructions.replace("(", " ").replace(")", " ")
    shorter_steps = instructions.split('.')
    shorter_steps = [step for step in shorter_steps if len(step) > 0]
    final_steps = []
    carry_over = ""
    for i, step in enumerate(shorter_steps):
        annotated_step = Step(text=(step + " " +carry_over).strip(), ingredients = ingredients_name)
        nsubj_exists = False
        print(str(annotated_step.text))
        pos = str(annotated_step.parse[0].pos_) # check if first word is a verb
        if pos != 'VERB':
            # find root, add to list of steps
            for token in annotated_step.parse:
                relation = str(token.dep_)
                if relation == 'nsubj':  # if not an imperative/command sentence
                    nsubj_exists = True
                    break
            
            if nsubj_exists:
                if i == 0:  # if not a command and the very first sentence
                    carry_over = annotated_step.text  # save it for the next step
                else:
                    # recreate the Step object for final_steps[i - 1]
                    print(annotated_step.text)
                    print(i, final_steps)
                    new_text = final_steps[-1].text + annotated_step.text 
                    final_steps[-1] = Step(text=new_text, ingredients = ingredients_name)
            else:
                final_steps.append(Step(text=annotated_step.text, ingredients=ingredients_name))
        else:
            final_steps.append(Step(text=annotated_step.text, ingredients=ingredients_name))
    parsed_steps = final_steps
    

def answer(question):
    pass

def main():
    #global scraper, ingredients, steps
    #create regex for commands that have inputs
    #make commands more vague to handle natural conversation
    #navigational needs next, and go to n'th step
    #for substutions if we dont have it in the dictionary return a google search for the ingredient
    commands = {"ingredients": "get list of ingredients", 
                "instructions": "get list of instructions", 
                "help": "get list of commands",
                "substution [ingredient]": "get possible substutions for an ingredient", 
                "how do I do [action]": "get link to youtube tutorial",
                "how much [ingredient]": "get quantity needed for ingredient",
                "what is [ingredient/tool]": "get image of query", #maybe dictionary entry?/image search
                "next": "show the next step",
                "previous": "show the previous step",
                "repeat": "show the current step",
                "start OR start over": "go to the first step",
                "stop": "exit the current recipe"}#add further commands as needed 
    input_flag = 1
    url = input("Please enter a url: ")
    scrape(url)
    print("Enter \'ingredients\' to get the list of ingredients")
    print("Enter \'instructions\' to list all instructions")
    print("Enter \'help\' for a list of commands")

    currentStep = 0
    while(input_flag == 1):
       
        user = input("Please enter a command, type help for a list of available commands: ")
        if "start" in user:
            currentStep = 0
            print(steps[currentStep])
        if user == "next":
            currentStep += 1
            print(steps[currentStep])
        if user == 'ingredients':
            print(ingredients)
        elif user == 'instructions':
            print(steps)
        elif user == 'help':
            print(commands)
        else:
            answer(user)
        
        cont = input("Do you want to continue y/n: ")

        if cont == 'y':
            continue
        if cont == 'n':
            print("Terminated")
            inputflag -= 1
            break

if __name__ == '__main__':
    main()




